{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const loginUser = createAsyncThunk('auth/loginUser', async (credentials, thunkAPI) => {\n  try {\n    // Replace with your API call logic\n    const response = await fetch('/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    return data; // Typically { token, user }\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  user: null,\n  token: null,\n  loading: false,\n  error: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout(state) {\n      state.user = null;\n      state.token = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","loginUser","credentials","thunkAPI","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","rejectWithValue","message","initialState","user","token","loading","authSlice","name","reducers","logout","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["D:/Task/latest-task/src/redux/slices/authSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const loginUser = createAsyncThunk(\r\n  'auth/loginUser',\r\n  async (credentials, thunkAPI) => {\r\n    try {\r\n      // Replace with your API call logic\r\n      const response = await fetch('/api/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Login failed');\r\n      }\r\n      const data = await response.json();\r\n      return data; // Typically { token, user }\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n    user: null,\r\n    token: null,\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        logout(state) {\r\n            state.user = null;\r\n            state.token = null;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginUser.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload.user;\r\n        state.token = action.payload.token;\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n})\r\n\r\nexport const { logout } = authSlice.actions;\r\nexport default authSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,SAAS,GAAGF,gBAAgB,CACvC,gBAAgB,EAChB,OAAOG,WAAW,EAAEC,QAAQ,KAAK;EAC/B,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;IAClC,CAAC,CAAC;IACF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IACjC;IACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,CAAC;EACf,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOZ,QAAQ,CAACa,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACF,CACF,CAAC;AAED,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,KAAK;EACdN,KAAK,EAAE;AACX,CAAC;AAED,MAAMO,SAAS,GAAGtB,WAAW,CAAC;EAC1BuB,IAAI,EAAE,MAAM;EACZL,YAAY;EACZM,QAAQ,EAAE;IACNC,MAAMA,CAACC,KAAK,EAAE;MACVA,KAAK,CAACP,IAAI,GAAG,IAAI;MACjBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACtB;EACJ,CAAC;EACDO,aAAa,EAAGC,OAAO,IAAK;IAC5BA,OAAO,CACJC,OAAO,CAAC5B,SAAS,CAAC6B,OAAO,EAAGJ,KAAK,IAAK;MACrCA,KAAK,CAACL,OAAO,GAAG,IAAI;MACpBK,KAAK,CAACX,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDc,OAAO,CAAC5B,SAAS,CAAC8B,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC/CN,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACP,IAAI,GAAGa,MAAM,CAACC,OAAO,CAACd,IAAI;MAChCO,KAAK,CAACN,KAAK,GAAGY,MAAM,CAACC,OAAO,CAACb,KAAK;IACpC,CAAC,CAAC,CACDS,OAAO,CAAC5B,SAAS,CAACiC,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC9CN,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACX,KAAK,GAAGiB,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAO,CAAC,GAAGH,SAAS,CAACa,OAAO;AAC3C,eAAeb,SAAS,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
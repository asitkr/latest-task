{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nexport const loginUser = createAsyncThunk('auth/loginUser', async (credentials, thunkAPI) => {\n  try {\n    // Replace with your API call logic\n    const response = await fetch('/api/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(credentials)\n    });\n    if (!response.ok) {\n      throw new Error('Login failed');\n    }\n    const data = await response.json();\n    return data; // Typically { token, user }\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nconst initialState = {\n  user: {\n    id: 1,\n    name: \"Ashit Sinha\",\n    email: \"ashit@example.com\",\n    role: \"admin\"\n  },\n  token: \"dummy-jwt-token-123\",\n  loading: false,\n  error: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout(state) {\n      state.user = null;\n      state.token = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","loginUser","credentials","thunkAPI","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","error","rejectWithValue","message","initialState","user","id","name","email","role","token","loading","authSlice","reducers","logout","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["D:/Task/latest-task/src/redux/slices/authSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const loginUser = createAsyncThunk(\r\n    'auth/loginUser',\r\n    async (credentials, thunkAPI) => {\r\n        try {\r\n            // Replace with your API call logic\r\n            const response = await fetch('/api/login', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(credentials),\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error('Login failed');\r\n            }\r\n            const data = await response.json();\r\n            return data; // Typically { token, user }\r\n        } catch (error) {\r\n            return thunkAPI.rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\n\r\nconst initialState = {\r\n    user: {\r\n        id: 1,\r\n        name: \"Ashit Sinha\",\r\n        email: \"ashit@example.com\",\r\n        role: \"admin\",\r\n    },\r\n    token: \"dummy-jwt-token-123\",\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        logout(state) {\r\n            state.user = null;\r\n            state.token = null;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(loginUser.pending, (state) => {\r\n                state.loading = true;\r\n                state.error = null;\r\n            })\r\n            .addCase(loginUser.fulfilled, (state, action) => {\r\n                state.loading = false;\r\n                state.user = action.payload.user;\r\n                state.token = action.payload.token;\r\n            })\r\n            .addCase(loginUser.rejected, (state, action) => {\r\n                state.loading = false;\r\n                state.error = action.payload;\r\n            });\r\n    },\r\n})\r\n\r\nexport const { logout } = authSlice.actions;\r\nexport default authSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,SAAS,GAAGF,gBAAgB,CACrC,gBAAgB,EAChB,OAAOG,WAAW,EAAEC,QAAQ,KAAK;EAC7B,IAAI;IACA;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MACvCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;IACpC,CAAC,CAAC;IACF,IAAI,CAACE,QAAQ,CAACO,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC;IACnC;IACA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAAC,CAAC;EACjB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZ,OAAOZ,QAAQ,CAACa,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAClD;AACJ,CACJ,CAAC;AAED,MAAMC,YAAY,GAAG;EACjBC,IAAI,EAAE;IACFC,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,aAAa;IACnBC,KAAK,EAAE,mBAAmB;IAC1BC,IAAI,EAAE;EACV,CAAC;EACDC,KAAK,EAAE,qBAAqB;EAC5BC,OAAO,EAAE,KAAK;EACdV,KAAK,EAAE;AACX,CAAC;AAED,MAAMW,SAAS,GAAG1B,WAAW,CAAC;EAC1BqB,IAAI,EAAE,MAAM;EACZH,YAAY;EACZS,QAAQ,EAAE;IACNC,MAAMA,CAACC,KAAK,EAAE;MACVA,KAAK,CAACV,IAAI,GAAG,IAAI;MACjBU,KAAK,CAACL,KAAK,GAAG,IAAI;IACtB;EACJ,CAAC;EACDM,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACFC,OAAO,CAAC/B,SAAS,CAACgC,OAAO,EAAGJ,KAAK,IAAK;MACnCA,KAAK,CAACJ,OAAO,GAAG,IAAI;MACpBI,KAAK,CAACd,KAAK,GAAG,IAAI;IACtB,CAAC,CAAC,CACDiB,OAAO,CAAC/B,SAAS,CAACiC,SAAS,EAAE,CAACL,KAAK,EAAEM,MAAM,KAAK;MAC7CN,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACV,IAAI,GAAGgB,MAAM,CAACC,OAAO,CAACjB,IAAI;MAChCU,KAAK,CAACL,KAAK,GAAGW,MAAM,CAACC,OAAO,CAACZ,KAAK;IACtC,CAAC,CAAC,CACDQ,OAAO,CAAC/B,SAAS,CAACoC,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAC5CN,KAAK,CAACJ,OAAO,GAAG,KAAK;MACrBI,KAAK,CAACd,KAAK,GAAGoB,MAAM,CAACC,OAAO;IAChC,CAAC,CAAC;EACV;AACJ,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAO,CAAC,GAAGF,SAAS,CAACY,OAAO;AAC3C,eAAeZ,SAAS,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}